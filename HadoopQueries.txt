Pig
-----------------------------------------------------------------------------------------
Protocol = LOAD '/user/cloudera/Data/PTCL.txt' using PigStorage(';')
as (ptclid:chararray, ptclname:chararray, phase:chararray,  status:chararray,
    pgmid:chararray, applnum:chararray, indicator:chararray, 
    prodid:chararray, prodname:chararray, bustype:chararray, 
    gender:chararray, leg:chararray, theraparea:chararray, 
    verified:chararray, pgmname:chararray, customer:chararray); 
/*    
    ROW_ID;PTCL_NAME;PTCL_PHASE;PTCL_STAT_CD;PGM_APPLN_ID;APPL_NUM;INDICATOR_CD;PRODUCT_ID;NAME;X_BUSINESS_TYPE;
    X_GENDER;X_LEG_INDICATION;X_THERA_AREA;X_LEG_THERA_AREA;X_VERIFIED_FLG;NAME_1;NAME_2
*/
myprotocol = FILTER Protocol by phase == 'Phase 2';

sorted = ORDER myprotocol by status DESC;

top5 = LIMIT sorted 5;

dump top5;
**********************************************************
myprotocol = FILTER Protocol by phase == 'Phase 2';

myprotocols = FOREACH myprotocol GENERATE phase,status;

grouped = GROUP myprotocols by (phase,status) ;

summed = FOREACH grouped GENERATE group, COUNT($1) as count;

sorted = ORDER summed by $0 ASC;

dump sorted;
**********************************************************




Hive
------------------------------------------------------------------------------------------
CREATE EXTERNAL TABLE IF NOT EXISTS protocol
(ptclid STRING, ptclname STRING, phase STRING,  status STRING,
    pgmid STRING, applnum STRING, indicator STRING, 
    prodid STRING, prodname STRING, bustype STRING, 
    gender STRING, leg STRING, theraparea STRING, 
    verified STRING, pgmname STRING, customer STRING)
COMMENT 'Our Clinical Protocol Data!'
ROW FORMAT DELIMITED 
	FIELDS TERMINATED BY ';'
	LINES TERMINATED BY '\n';

LOAD DATA INPATH '/user/cloudera/Data/PTCL.txt' OVERWRITE INTO TABLE protocol;

SELECT phase, count(status) from protocol group by phase;
**********************************************************
SELECT phase, status, unix_timestamp() from protocol ;



PTCL.ROW_ID, PTCL.PTCL_NAME, PTCL.PTCL_NUM,SITE.SITE_NUM,SITE.STATUS_CD,
SUBJ.ROW_ID,SUBJ.SUBJ_NUM,SUBJ.BIRTH_DT, to_char(SUBJ.BIRTH_DT,'YYYYMMDD'),  
  SUBJ.PTCL_SITE_ID,SUBJ.CREATED,to_char(SUBJ.CREATED,'YYYYMMDD'), 
SJ_STAT.STATUS_CD,SJ_STAT.PAR_SUBJ_ID,to_char(SJ_STAT.STATUS_DATE,'YYYYMMDD'),
  to_char(SJ_STAT.CREATED,'YYYYMMDD'),SJ_STAT.DB_LAST_UPD_SRC
**********************************************************

CREATE EXTERNAL TABLE IF NOT EXISTS sitesubjects(
  protcolid STRING, protocolname STRING, protocolnum STRING, sitenum STRING, sitestatus STRING,
  subjectid STRING, subjectnum STRING, birthdate STRING,birthdt STRING, 
  protocolsiteid STRING, subjcreateddate STRING, subjcreated STRING,
  subjstatus STRING, statussubjid STRING, statusdate STRING,statuscreated STRING, statusby STRING)
  COMMENT 'Our Clinical Site Subject Data!'
ROW FORMAT DELIMITED 
	FIELDS TERMINATED BY ';'
	LINES TERMINATED BY '\n';
 
LOAD DATA INPATH '/user/cloudera/Data/Hive/SITESUBJ.txt' OVERWRITE INTO TABLE sitesubjects;

SELECT protocolname, count(subjstatus) from sitesubjects group by protocolname;

SELECT protocolnum, count(subjstatus) from sitesubjects group by protocolnum;

SELECT count(subjstatus) from sitesubjects group by protocolnum;

ANALYZE TABLE sitesubjects PARTITION(subjstatus) COMPUTE STATISTICS noscan;

DESCRIBE EXTENDED sitesubjects;

--------------------------------------------Book Data--------Hive Start
CREATE TABLE IF NOT EXISTS BookData 
 (ISBN STRING, 
 BookTitle STRING, 
 BookAuthor STRING, 
 YearOfPublication INT, 
 Publisher STRING)
 ROW FORMAT DELIMITED 
 FIELDS TERMINATED BY '\;'
 STORED AS TEXTFILE;
 
LOAD DATA INPATH '/user/cloudera/Data/BX-BooksC.csv'
 OVERWRITE INTO TABLE BookData;

CREATE TABLE IF NOT EXISTS BookRating 
  (UserId STRING, 
  ISBN STRING, 
  Rating INT)
  ROW FORMAT DELIMITED 
  FIELDS TERMINATED BY '\;'
  STORED AS TEXTFILE;
  
 LOAD DATA INPATH '/user/cloudera/Data/BX-BookRatingC.csv'
 OVERWRITE INTO TABLE BookRating;

 CREATE TABLE IF NOT EXISTS UserData 
  (UserId STRING, 
  Location STRING, 
  Age INT)
  ROW FORMAT DELIMITED 
  FIELDS TERMINATED BY '\;'
  STORED AS TEXTFILE;
  
 LOAD DATA INPATH '/user/cloudera/Data/BX-UsersC.csv'
 OVERWRITE INTO TABLE UserData;

 
 SELECT YearOfPublication, COUNT(BookTitle) 
 FROM BookData GROUP BY YearOfPublication;
 
INSERT OVERWRITE TABLE BookData
SELECT BookData.*
FROM BookData WHERE YearOfPublication > 0;
/*
There are 4619 book entries with 0 as year
*/

SELECT Publisher, BookAuthor, YearOfPublication, COUNT(BookTitle) 
 FROM BookData 
 GROUP BY Publisher, BookAuthor, YearOfPublication;

--------------------------------------------Book Data--------Hive End

SELECT COUNT(*)
FROM
( SELECT protocolnum 
FROM sitesubjects
WHERE group_count(protocolnum) = 0
DISTRIBUTE BY protocolnum
) a;
**********************************************************




samples from web

SELECT actor_id, movie_id, movie_release_date
FROM movies
WHERE group_count(movie_id) = 0
DISTRIBUTE BY actor_id
SORT BY actor_id, movie_release_date

SELECT COUNT(DISTINCT col_A) AS colA_count
FROM table_a;

then is this the correct optimized query?

SELECT COUNT(*)
FROM
( SELECT col_A 
FROM table_a
WHERE group_count(col_B) = 0
DISTRIBUTE BY col_A
) a;

select count(*)
from
( select actor_id, movie_id
  from movies
  distribute by actor_id
  where group_count(movie_id) = 0
) a;

select actor_id, movie_id, movie_release_date
from movies
distribute by actor_id
sort by actor_id, movie_release_date
where group_count(movie_id) = 0;

Hive doesn't support NOT IN patterns in sub query. So we can't run this following query:

select actor_id
from table1
where NOT actor_id IN 
  ( select actor_id
    from table2
  );
  
  To achieve the set difference, we have to get a little more creative:
  
  select t1.actor_id
  from 
  ( select actor_id
    from table1
  ) t1
  left outer join 
  ( select actor_id
    from table2
  ) t2
  on (t1.actor_id = t2.actor_id)
  where t2.actor_id is null;
Rows where successful joins are possible will have a non-null entry and this way they will be filtered out. The left outer join will make sure all entries from table1 are included and rows from table2 are filtered out.
